{
    "docs": [
        {
            "location": "/", 
            "text": "Outline\n\n\n\n\nLibrary Outline\n\n\n\n\nPublic Documentation\n\n\nContents\n\n\nIndex\n\n\nSetting up simulations\n\n\nGenerating networks\n\n\nSimulating and saving the output\n\n\nAnalysis of output\n\n\n\n\n\n\nInternal Documentation\n\n\nContents\n\n\nIndex\n\n\nFunctions and methods\n\n\n\n\n\n\n\n\n\n\nIndex\n\n\n\n\nFunctions\n\n\n\n\nBioEnergeticFoodWebs.foodweb_diversity\n\n\nBioEnergeticFoodWebs.model_parameters\n\n\nBioEnergeticFoodWebs.nichemodel\n\n\nBioEnergeticFoodWebs.population_biomass\n\n\nBioEnergeticFoodWebs.population_stability\n\n\nBioEnergeticFoodWebs.save\n\n\nBioEnergeticFoodWebs.simulate\n\n\nBioEnergeticFoodWebs.species_persistence\n\n\nBioEnergeticFoodWebs.species_richness\n\n\nBioEnergeticFoodWebs.total_biomass\n\n\nBioEnergeticFoodWebs.connectance", 
            "title": "Home"
        }, 
        {
            "location": "/#outline", 
            "text": "", 
            "title": "Outline"
        }, 
        {
            "location": "/#library-outline", 
            "text": "Public Documentation  Contents  Index  Setting up simulations  Generating networks  Simulating and saving the output  Analysis of output    Internal Documentation  Contents  Index  Functions and methods", 
            "title": "Library Outline"
        }, 
        {
            "location": "/#index", 
            "text": "", 
            "title": "Index"
        }, 
        {
            "location": "/#functions", 
            "text": "BioEnergeticFoodWebs.foodweb_diversity  BioEnergeticFoodWebs.model_parameters  BioEnergeticFoodWebs.nichemodel  BioEnergeticFoodWebs.population_biomass  BioEnergeticFoodWebs.population_stability  BioEnergeticFoodWebs.save  BioEnergeticFoodWebs.simulate  BioEnergeticFoodWebs.species_persistence  BioEnergeticFoodWebs.species_richness  BioEnergeticFoodWebs.total_biomass  BioEnergeticFoodWebs.connectance", 
            "title": "Functions"
        }, 
        {
            "location": "/man/installation/", 
            "text": "Getting started with \nBioEnergeticFoodWebs\n\n\n\n\nInstalling \njulia\n\n\nJulia can be installed from the \nJuliaLang\n website. Most GNU/Linux distributions have a package named \njulia\n, and there are [platform-specific][pfsi] instructions if needs be.\n\n\nThere are further specific instructions to install a Julia kernel in Jupyter on the \nIJulia\n page.\n\n\n\n\nInstalling \nBioEnergeticFoodWebs\n\n\nThe current version can be installed by typing the following line into Julia (which is usually started from the command line\n\n\nPkg.add(\nBioEnergeticFoodWebs\n)\n\n\n\n\nThe package can be loaded with\n\n\nusing BioEnergeticFoodWebs\n\n\n\n\n\n\nKeeping up to date\n\n\nIf you have already installed the package, you can check for updates with\n\n\nPkg.update()", 
            "title": "Installation"
        }, 
        {
            "location": "/man/installation/#getting-started-with-bioenergeticfoodwebs", 
            "text": "", 
            "title": "Getting started with BioEnergeticFoodWebs"
        }, 
        {
            "location": "/man/installation/#installing-julia", 
            "text": "Julia can be installed from the  JuliaLang  website. Most GNU/Linux distributions have a package named  julia , and there are [platform-specific][pfsi] instructions if needs be.  There are further specific instructions to install a Julia kernel in Jupyter on the  IJulia  page.", 
            "title": "Installing julia"
        }, 
        {
            "location": "/man/installation/#installing-bioenergeticfoodwebs", 
            "text": "The current version can be installed by typing the following line into Julia (which is usually started from the command line  Pkg.add( BioEnergeticFoodWebs )  The package can be loaded with  using BioEnergeticFoodWebs", 
            "title": "Installing BioEnergeticFoodWebs"
        }, 
        {
            "location": "/man/installation/#keeping-up-to-date", 
            "text": "If you have already installed the package, you can check for updates with  Pkg.update()", 
            "title": "Keeping up to date"
        }, 
        {
            "location": "/man/random/", 
            "text": "Generating random networks\n\n\nUsers can generate random networks. It is, of course, possible to supply your own. The networks should be presented as matrices of 0 and 1. Internally, \nbefwm\n will check that there are as many rows as there are columns.\n\n\n\n\nNiche model\n\n\nFollowing Williams \n Martinez, we have implemented the \nniche\n model of food webs. This model represents allometric relationships between preys and predators well, and is therefore well suited to generate random networks.\n\n\nRandom niche model networks can be generated using \nnichemodel\n, which takes two arguments: the number of species \nS\n, and the desired connectance \nC\n:\n\n\nnichemodel(10, 0.2)\n\n\n\n\nNote that there are a number of keyword arguments (optional) that can be supplied: \ntolerance\n will give the allowed deviation from the desired connectance, and \ntoltype\n will indicate whether the error is relative or absolute.", 
            "title": "Generating random networks"
        }, 
        {
            "location": "/man/random/#generating-random-networks", 
            "text": "Users can generate random networks. It is, of course, possible to supply your own. The networks should be presented as matrices of 0 and 1. Internally,  befwm  will check that there are as many rows as there are columns.", 
            "title": "Generating random networks"
        }, 
        {
            "location": "/man/random/#niche-model", 
            "text": "Following Williams   Martinez, we have implemented the  niche  model of food webs. This model represents allometric relationships between preys and predators well, and is therefore well suited to generate random networks.  Random niche model networks can be generated using  nichemodel , which takes two arguments: the number of species  S , and the desired connectance  C :  nichemodel(10, 0.2)  Note that there are a number of keyword arguments (optional) that can be supplied:  tolerance  will give the allowed deviation from the desired connectance, and  toltype  will indicate whether the error is relative or absolute.", 
            "title": "Niche model"
        }, 
        {
            "location": "/lib/public/", 
            "text": "Public Documentation\n\n\nDocumentation for \nBioEnergeticFoodWebs\n's public (exported) interface.\n\n\nSee \nInternal Documentation\n for documentation on internal functions.\n\n\n\n\nContents\n\n\n\n\nPublic Documentation\n\n\nContents\n\n\nIndex\n\n\nSetting up simulations\n\n\nGenerating networks\n\n\nSimulating and saving the output\n\n\nAnalysis of output\n\n\n\n\n\n\n\n\n\n\nIndex\n\n\n\n\nBioEnergeticFoodWebs.foodweb_diversity\n\n\nBioEnergeticFoodWebs.model_parameters\n\n\nBioEnergeticFoodWebs.nichemodel\n\n\nBioEnergeticFoodWebs.population_biomass\n\n\nBioEnergeticFoodWebs.population_stability\n\n\nBioEnergeticFoodWebs.save\n\n\nBioEnergeticFoodWebs.simulate\n\n\nBioEnergeticFoodWebs.species_persistence\n\n\nBioEnergeticFoodWebs.species_richness\n\n\nBioEnergeticFoodWebs.total_biomass\n\n\n\n\n\n\nSetting up simulations\n\n\n#\n\n\nBioEnergeticFoodWebs.model_parameters\n \n \nFunction\n.\n\n\nCreate default parameters\n\n\nThis function creates model parameters, based on a food web matrix. Specifically, the default values are:\n\n\n\n\n\n\n\n\nParameter\n\n\nDefault Value\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\nK\n\n\n1.0\n\n\ncarrying capacity of producers\n\n\n\n\n\n\nZ\n\n\n1.0\n\n\nconsumer-resource body mass ratio\n\n\n\n\n\n\nr\n\n\n1.0\n\n\ngrowth rate of producers\n\n\n\n\n\n\na_invertebrate\n\n\n0.314\n\n\nallometric constant for invertebrate consumers\n\n\n\n\n\n\na_producers\n\n\n1.0\n\n\nallometric constant of producers\n\n\n\n\n\n\na_vertebrate\n\n\n0.88\n\n\nallometric constant for vertebrate consumers\n\n\n\n\n\n\nc\n\n\n0\n\n\nquantifies the predator interference\n\n\n\n\n\n\nh\n\n\n1\n\n\nHill coefficient\n\n\n\n\n\n\ne_carnivore\n\n\n0.85\n\n\nassimilation efficiency of carnivores\n\n\n\n\n\n\ne_herbivore\n\n\n0.45\n\n\nassimilation efficiency of herbivores\n\n\n\n\n\n\nm_producers\n\n\n1\n\n\nbody-mass of producers\n\n\n\n\n\n\ny_invertebrate\n\n\n8\n\n\nmaximum consumption rate of invertebrate predators relative to their metabolic rate\n\n\n\n\n\n\ny_vertebrate\n\n\n4\n\n\nmaximum consumption rate of vertebrate predators relative to their metabolic rate\n\n\n\n\n\n\n\u0393\n\n\n0.5\n\n\nhalf-saturation density\n\n\n\n\n\n\n\u03b1\n\n\n1.0\n\n\ninterspecific competition\n\n\n\n\n\n\nproductivity\n\n\n:species\n\n\ntype of productivity regulation\n\n\n\n\n\n\n\n\nAll of these values are passed as optional keyword arguments to the function.\n\n\nA = [0 1 1; 0 0 0; 0 0 0]\np = model_parameters(A, Z=100.0, productivity=:system)\n\n\n\n\nThe \nproductivity\n keyword can be either \n:species\n (each species has an independant carrying capacity equal to \nK\n), \n:system\n (the carrying capacity is K divided by the number of primary producers), or \n:competitive\n (the species compete with themselves at rate 1.0, and with one another at rate \u03b1).\n\n\nIt is possible for the user to specify a vector of species body-mass, called \nbodymass\n \u2013 please do pay attention to the fact that the model assumes that primary producers have a bodymass equal to unity, since all biological rates are expressed relatively. We do not perform any check on whether or not the user-supplied body-mass vector is correct (mostly because there is no way of defining correctness for vectors where body-mass of producers are not equal to unity).\n\n\nThe final keyword is \nvertebrates\n, which is an array of \ntrue\n or \nfalse\n for every species in the matrix. By default, all species are invertebrates.\n\n\nsource\n\n\n\n\nGenerating networks\n\n\n#\n\n\nBioEnergeticFoodWebs.nichemodel\n \n \nFunction\n.\n\n\nNiche model of food webs\n\n\nTakes a number of species \nS\n and a number of interactions \nL\n, and returns a food web with predators in rows, and preys in columns. This function is used internally by \nnichemodel\n called with a connectance.\n\n\nsource\n\n\nNiche model of food webs\n\n\nTakes a number of species \nS\n and a connectance \nC\n, and returns a food web with predators in rows, and preys in columns. Note that the connectance is first transformed into an integer number of interactions.\n\n\nThis function has two keyword arguments:\n\n\n\n\ntolerance\n is the allowed error on tolerance (see below)\n\n\ntoltype\n is the type or error, and can be \n:abs\n (absolute) and \n:rel\n\n\n\n\n(relative). Relative tolerance is the amount of error allowed, relative to the desired connectance value. If the simulated network has a tolerance x, the target connectance is c, then the relative error is |1-x/c|.\n\n\nsource\n\n\n\n\nSimulating and saving the output\n\n\n#\n\n\nBioEnergeticFoodWebs.simulate\n \n \nFunction\n.\n\n\nMain simulation loop\n\n\nThis function takes two mandatory arguments:\n\n\n\n\np\n is a \nDict\n as returned by \nmake_parameters\n\n\nbiomass\n is a \nArray{Float64, 1}\n with the initial biomasses of every species\n\n\n\n\nInternally, the function will check that the length of \nbiomass\n matches with the size of the network.\n\n\nIn addition, the function takes three optional arguments:\n\n\n\n\nstart\n (defaults to 0), the initial time\n\n\nstop\n (defaults to 500), the final time\n\n\nuse\n (defaults to \n:ode45\n), the integration method\n\n\n\n\nThe integration method is, by default, \n:ode45\n, and can be changed to one of \n:ode23\n, \n:ode45\n, \n:ode78\n, or \n:ode23s\n.\n\n\nThe \nsimulate\n function returns a \nDict{Symbol, Any}\n, with three top-level keys:\n\n\n\n\n:p\n, the parameters that were given as input\n\n\n:t\n, the timesteps\n\n\n:B\n, an \nArray{Float64, 2}\n with the biomasses\n\n\n\n\nThe array of biomasses has one row for each timestep, and one column for each species.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.save\n \n \nFunction\n.\n\n\nSave the output of a simulation\n\n\nTakes a simulation output as a mandatory argument. The two keyword arguments are \nas\n (can be \n:json\n or \n:jld\n), defining the file format, and \nfilename\n (without an extension, defaults to \nNaN\n). If \n:jld\n is used, the variable is named \nbefwm_simul\n unless a \nvarname\n is given.\n\n\nCalled with the defaults, this function will write \nbefwm_xxxxxxxx.json\n with the current simulation output, where \nxxxxxxxx\n is a hash of the \np\n output (ensuring that all output files are unique).\n\n\nThis function is \nnot\n exported, so it must be called with \nBioEnergeticFoodWebs.save\n.\n\n\nsource\n\n\n\n\nAnalysis of output\n\n\n#\n\n\nBioEnergeticFoodWebs.population_stability\n \n \nFunction\n.\n\n\nPopulation stability\n\n\nTakes a matrix with populations in columns, timesteps in rows. This is usually the element \n:B\n of the simulation output. Population stability is measured as the mean of the negative coefficient of variations of all species with an abundance higher than \nthreshold\n. By default, the stability is measured over the last \nlast=1000\n timesteps.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.total_biomass\n \n \nFunction\n.\n\n\nTotal biomass\n\n\nReturns the sum of biomass, averaged over the last \nlast\n timesteps.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.population_biomass\n \n \nFunction\n.\n\n\nPer species biomass\n\n\nReturns the average biomass of all species, over the last \nlast\n timesteps.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.foodweb_diversity\n \n \nFunction\n.\n\n\nFood web diversity\n\n\nBased on the average of Shannon's entropy over the last \nlast\n timesteps.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.species_richness\n \n \nFunction\n.\n\n\nNumber of surviving species\n\n\nNumber of species with a biomass larger than the \nthreshold\n. The threshold is by default set at \neps()\n, which should be close to 10^-16.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.species_persistence\n \n \nFunction\n.\n\n\nProportion of surviving species\n\n\nProportion of species with a biomass larger than the \nthreshold\n. The threshold is by default set at \neps()\n, which should be close to 10^-16.\n\n\nsource", 
            "title": "Public"
        }, 
        {
            "location": "/lib/public/#public-documentation", 
            "text": "Documentation for  BioEnergeticFoodWebs 's public (exported) interface.  See  Internal Documentation  for documentation on internal functions.", 
            "title": "Public Documentation"
        }, 
        {
            "location": "/lib/public/#contents", 
            "text": "Public Documentation  Contents  Index  Setting up simulations  Generating networks  Simulating and saving the output  Analysis of output", 
            "title": "Contents"
        }, 
        {
            "location": "/lib/public/#index", 
            "text": "BioEnergeticFoodWebs.foodweb_diversity  BioEnergeticFoodWebs.model_parameters  BioEnergeticFoodWebs.nichemodel  BioEnergeticFoodWebs.population_biomass  BioEnergeticFoodWebs.population_stability  BioEnergeticFoodWebs.save  BioEnergeticFoodWebs.simulate  BioEnergeticFoodWebs.species_persistence  BioEnergeticFoodWebs.species_richness  BioEnergeticFoodWebs.total_biomass", 
            "title": "Index"
        }, 
        {
            "location": "/lib/public/#setting-up-simulations", 
            "text": "#  BioEnergeticFoodWebs.model_parameters     Function .  Create default parameters  This function creates model parameters, based on a food web matrix. Specifically, the default values are:     Parameter  Default Value  Meaning      K  1.0  carrying capacity of producers    Z  1.0  consumer-resource body mass ratio    r  1.0  growth rate of producers    a_invertebrate  0.314  allometric constant for invertebrate consumers    a_producers  1.0  allometric constant of producers    a_vertebrate  0.88  allometric constant for vertebrate consumers    c  0  quantifies the predator interference    h  1  Hill coefficient    e_carnivore  0.85  assimilation efficiency of carnivores    e_herbivore  0.45  assimilation efficiency of herbivores    m_producers  1  body-mass of producers    y_invertebrate  8  maximum consumption rate of invertebrate predators relative to their metabolic rate    y_vertebrate  4  maximum consumption rate of vertebrate predators relative to their metabolic rate    \u0393  0.5  half-saturation density    \u03b1  1.0  interspecific competition    productivity  :species  type of productivity regulation     All of these values are passed as optional keyword arguments to the function.  A = [0 1 1; 0 0 0; 0 0 0]\np = model_parameters(A, Z=100.0, productivity=:system)  The  productivity  keyword can be either  :species  (each species has an independant carrying capacity equal to  K ),  :system  (the carrying capacity is K divided by the number of primary producers), or  :competitive  (the species compete with themselves at rate 1.0, and with one another at rate \u03b1).  It is possible for the user to specify a vector of species body-mass, called  bodymass  \u2013 please do pay attention to the fact that the model assumes that primary producers have a bodymass equal to unity, since all biological rates are expressed relatively. We do not perform any check on whether or not the user-supplied body-mass vector is correct (mostly because there is no way of defining correctness for vectors where body-mass of producers are not equal to unity).  The final keyword is  vertebrates , which is an array of  true  or  false  for every species in the matrix. By default, all species are invertebrates.  source", 
            "title": "Setting up simulations"
        }, 
        {
            "location": "/lib/public/#generating-networks", 
            "text": "#  BioEnergeticFoodWebs.nichemodel     Function .  Niche model of food webs  Takes a number of species  S  and a number of interactions  L , and returns a food web with predators in rows, and preys in columns. This function is used internally by  nichemodel  called with a connectance.  source  Niche model of food webs  Takes a number of species  S  and a connectance  C , and returns a food web with predators in rows, and preys in columns. Note that the connectance is first transformed into an integer number of interactions.  This function has two keyword arguments:   tolerance  is the allowed error on tolerance (see below)  toltype  is the type or error, and can be  :abs  (absolute) and  :rel   (relative). Relative tolerance is the amount of error allowed, relative to the desired connectance value. If the simulated network has a tolerance x, the target connectance is c, then the relative error is |1-x/c|.  source", 
            "title": "Generating networks"
        }, 
        {
            "location": "/lib/public/#simulating-and-saving-the-output", 
            "text": "#  BioEnergeticFoodWebs.simulate     Function .  Main simulation loop  This function takes two mandatory arguments:   p  is a  Dict  as returned by  make_parameters  biomass  is a  Array{Float64, 1}  with the initial biomasses of every species   Internally, the function will check that the length of  biomass  matches with the size of the network.  In addition, the function takes three optional arguments:   start  (defaults to 0), the initial time  stop  (defaults to 500), the final time  use  (defaults to  :ode45 ), the integration method   The integration method is, by default,  :ode45 , and can be changed to one of  :ode23 ,  :ode45 ,  :ode78 , or  :ode23s .  The  simulate  function returns a  Dict{Symbol, Any} , with three top-level keys:   :p , the parameters that were given as input  :t , the timesteps  :B , an  Array{Float64, 2}  with the biomasses   The array of biomasses has one row for each timestep, and one column for each species.  source  #  BioEnergeticFoodWebs.save     Function .  Save the output of a simulation  Takes a simulation output as a mandatory argument. The two keyword arguments are  as  (can be  :json  or  :jld ), defining the file format, and  filename  (without an extension, defaults to  NaN ). If  :jld  is used, the variable is named  befwm_simul  unless a  varname  is given.  Called with the defaults, this function will write  befwm_xxxxxxxx.json  with the current simulation output, where  xxxxxxxx  is a hash of the  p  output (ensuring that all output files are unique).  This function is  not  exported, so it must be called with  BioEnergeticFoodWebs.save .  source", 
            "title": "Simulating and saving the output"
        }, 
        {
            "location": "/lib/public/#analysis-of-output", 
            "text": "#  BioEnergeticFoodWebs.population_stability     Function .  Population stability  Takes a matrix with populations in columns, timesteps in rows. This is usually the element  :B  of the simulation output. Population stability is measured as the mean of the negative coefficient of variations of all species with an abundance higher than  threshold . By default, the stability is measured over the last  last=1000  timesteps.  source  #  BioEnergeticFoodWebs.total_biomass     Function .  Total biomass  Returns the sum of biomass, averaged over the last  last  timesteps.  source  #  BioEnergeticFoodWebs.population_biomass     Function .  Per species biomass  Returns the average biomass of all species, over the last  last  timesteps.  source  #  BioEnergeticFoodWebs.foodweb_diversity     Function .  Food web diversity  Based on the average of Shannon's entropy over the last  last  timesteps.  source  #  BioEnergeticFoodWebs.species_richness     Function .  Number of surviving species  Number of species with a biomass larger than the  threshold . The threshold is by default set at  eps() , which should be close to 10^-16.  source  #  BioEnergeticFoodWebs.species_persistence     Function .  Proportion of surviving species  Proportion of species with a biomass larger than the  threshold . The threshold is by default set at  eps() , which should be close to 10^-16.  source", 
            "title": "Analysis of output"
        }, 
        {
            "location": "/lib/internals/", 
            "text": "Internal Documentation\n\n\n\n\nContents\n\n\n\n\nInternal Documentation\n\n\nContents\n\n\nIndex\n\n\nFunctions and methods\n\n\n\n\n\n\n\n\n\n\nIndex\n\n\n\n\nBioEnergeticFoodWebs.connectance\n\n\n\n\n\n\nFunctions and methods\n\n\n#\n\n\nBioEnergeticFoodWebs.connectance\n \n \nFunction\n.\n\n\n Connectance of a network\n\n\nReturns the connectance of a square matrix, defined as $S/L^2$.\n\n\nsource", 
            "title": "Internals"
        }, 
        {
            "location": "/lib/internals/#internal-documentation", 
            "text": "", 
            "title": "Internal Documentation"
        }, 
        {
            "location": "/lib/internals/#contents", 
            "text": "Internal Documentation  Contents  Index  Functions and methods", 
            "title": "Contents"
        }, 
        {
            "location": "/lib/internals/#index", 
            "text": "BioEnergeticFoodWebs.connectance", 
            "title": "Index"
        }, 
        {
            "location": "/lib/internals/#functions-and-methods", 
            "text": "#  BioEnergeticFoodWebs.connectance     Function .   Connectance of a network  Returns the connectance of a square matrix, defined as $S/L^2$.  source", 
            "title": "Functions and methods"
        }
    ]
}